# frozen_string_literal: false

require 'minitest/autorun'
require 'minitest/pride'

puts <<~STATEMENT
  Given a word, write a function to generate
  all of its unique generalized abbreviations.

  Generalized abbreviation of a word can be
  generated by replacing each substring of
  the word by the count of characters in the
  substring.
STATEMENT

# Solution
class Solution
  def solution(str)
    queue = ['']

    str.each_char do |chr|
      queue.length.times do
        curr = queue.shift

        temp = curr
        if temp.length >= 1 && temp[-1].match?(/\d/)
          temp[-1] = (temp[-1].to_i + 1).to_s
        else
          temp += '1'
        end
        queue << temp
        queue << curr + chr
      end
    end
    queue
  end
end

# Tests
class SolutionTest < Minitest::Test
  def test_case1
    solution = Solution.new.solution('')
    expected = ['']

    assert_equal(expected, solution)
  end

  def test_case2
    solution = Solution.new.solution('a')
    expected = %w[a 1]

    assert_equal(expected, solution)
  end

  def test_case3
    solution = Solution.new.solution('ab')
    expected = %w[ab a1 1b 2]

    assert_equal(expected, solution)
  end

  def test_case4
    solution = Solution.new.solution('abc')
    expected = %w[abc ab1 a1c a2 1bc 1b1 2c 3]

    assert_equal(expected, solution)
  end

  def test_case5
    solution = Solution.new.solution('code')
    expected = %w[code cod1 co1e co2 c1de c1d1 c2e c3 1ode 1od1 1o1e 1o2 2de 2d1 3e 4]

    assert_equal(expected, solution)
  end
end
